swagger: '2.0'
info:
  version: 1.0.0
  title: Bambora Payments API
  description: Bambora Payments API for Q1
  contact:
    name: support-to-be-defined@bambora.com
  termsOfService: 'See http://tbd.bambora.com/terms_of_use'
  license:
    name: TBD
    url: 'http://tbd.bambora.com/licenses/LICENSE-1.0.html'

host: localhost

schemes:
  - https
  - http

basePath: /payments/v1

consumes:
  - application/json

produces:
  - application/json
  - application/problem+json

paths:
  /transactions/{transaction_id}/:
    get:
      operationId: query_payment
      summary: Retrieve payment information
      description: >
        Query the payment service for information on this transaction. Returns
        payment details and transaction status.
      tags:
        - payments
      parameters:
        - name: transaction_id
          in: path
          description: Merchant-specific identifier for the transaction.
          required: true
          type: string
      responses:
        '200':
          description: >
            Transaction found by query.
          schema:
            $ref: '#/definitions/PaymentResponse'
        default:
          description: >
            Query failed. A 404 status code is returned when the transaction
            can't be found.
          schema:
            $ref: '#/definitions/Error'
  /transactions/{transaction_id}/credit_card_token/:
    post:
      operationId: authorize_token_payment
      summary: Post payment with card token
      description: Create a new payment using a tokenized credit card.
      tags:
        - payments
      parameters:
        - name: transaction_id
          in: path
          description: >
            Identifier for the transaction. Must be unique for this merchant.
          required: true
          type: string
        - name: payment
          in: body
          description: Payment details
          required: true
          schema:
            $ref: '#/definitions/TokenAuthorization'
      responses:
        '201':
          description: >
            Successful payment response - transaction created. The amount
            specified in the purchase has been approved.
          schema:
            $ref: '#/definitions/PaymentResponse'
        default:
          description: >
            Unexpected error or card declined. A 402 status code is a declined
            card of failed transaction.
          schema:
            $ref: '#/definitions/Error'
  /transactions/{transaction_id}/capture/:
    post:
      operationId: capture_payment
      tags:
        - payments
      description: >
        Capture all or a part of the amount specified in the transaction
      produces:
        - application/json
      parameters:
        - name: transaction_id
          in: path
          description: The transaction id of the pre-auth that will be captured.
          required: true
          type: string
        - name: parameters
          in: body
          description: Capture parameters
          required: false
          schema:
            $ref: '#/definitions/Capture'
      responses:
        '201':
          description: Successful capture.
          schema:
            $ref: '#/definitions/PaymentResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Error:
    type: object
    properties:
      status:
        type: integer
        format: int32
        enum:
          - 400
          - 401
          - 402
          - 403
          - 404
          - 415
          - 500
        description: |
          The HTTP status code is also included in the message body of the
          response.
          400 indicates an invalid request, usually an incorrectly formatted
          request from the client.
          401 is an authorization exception, wrong API key or no auth supplied.
          402 is a declined transaction. The message content was correct,
          however.
          404 occurs when a resource cannot be found.
          415 incorrect media type supplied in the request.
          500 internal server error. These are rare.
      code:
        type: integer
        format: int32
        description: >
          The code specific to this error. Details of the error can be found in
          the info field of this message.
      message:
        type: string
        description: >
          The human-readable error message that a developer will see. It is up
          to the developers to decide if this message should be shown to the
          user, for example if it is a declined card transaction vs. a message
          formatting error.
      info:
        type: string
        description: >
          A URL link to the support documentation for this particular error.
          The URL will have the error code as part of it. For example:
          http://support.bambora.com/errors/1234
    required:
      - status
  TokenAuthorization:
    type: object
    required:
      - currency
      - amount
      - token
    properties:
      currency:
        type: string
        description: >
          Values of: EUR, USD, CAD, GBP, SEK et c. Uses ISO-4217 currency codes.
        enum:
          - EUR
          - USD
          - CAD
          - GBP
          - SEK
          - AUD
          - NZD
      amount:
        type: number
        format: int64
        minimum: 0
        description: >
          The amount of the transaction in the specified currency's
          cents (or equivalent).
      token:
        type: string
      comment:
        type: string
        maxLength: 256
        description: >
          256 characters of available space for a comment that will be saved
          on the transaction.
  Capture:
    type: object
    properties:
      amount:
        type: number
        format: int64
        minimum: 0
        description: >
          Amount to capture, in cents (or equivalent). If this is less
          than the amount of the transaction, a partial capture will
          be performed. If this parameter is omitted, the entire
          amount of the transaction will be captured.
      comment:
        type: string
        maxLength: 256
        description: >
          256 characters of available space for a comment that will be saved
          on the transaction.
  PaymentResponse:
    type: object
    required:
      - transaction_id
      - state
    properties:
      transaction_id:
        type: string
        description: Merchant-specific identifier for the transaction.
      state:
        type: string
        description: Set by the system when sent for processing.
        enum:
          - Authorized
          - Authorization Expired
          - Declined
          - Voided
          - Settling
          - Settled
      currency:
        type: string
        description: >
          Values of: EUR, USD, CAD, GBP, SEK et c. Uses ISO-4217 currency codes.
        enum:
          - EUR
          - USD
          - CAD
          - GBP
          - SEK
          - AUD
          - NZD
      amount:
        type: number
        format: int64
        minimum: 0
        description: >
          The amount of the transaction in the specified currency's
          cents (or equivalent).
      comment:
        type: string
        maxLength: 256
        description: >
          256 characters of available space for a comment that will be saved
          on the transaction.
